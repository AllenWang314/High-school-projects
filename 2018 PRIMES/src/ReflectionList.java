import java.util.ArrayList;
import java.util.Arrays;

public class ReflectionList {

	/**
	 * Returns the array flipped at index. So all the terms from 0 to index-1 stay constant
	 * @param a
	 * @param index
	 * @return
	 */
	public static ArrayList<Integer> reflect(ArrayList<Integer> a, int index) {
		ArrayList<Integer> answer = new ArrayList<Integer>();
		for (int i = 0; i< index; i++) {
			answer.add(a.get(i));
		}
		for (int i = 0; i< a.size()-index; i++) {
			answer.add(a.get(a.size() - i-1));
		}
		return answer;
	}
	
	public static void main(String[] args) {
		int length = 9;
		ArrayList<Integer> a = new ArrayList<Integer>();
		for(int i = 1; i <= length; i++) {
			a.add(i);
		}

		/**
		 * 
		 * Class for an ordered pair of ArrayList of integers
		 *
		 */
		class Hash {
			
			ArrayList<Integer> key;
			ArrayList<Integer> value;
			
			Hash(ArrayList<Integer> key, ArrayList<Integer> value){
				this.key = key;
				this.value = value;
			}
			
			ArrayList<Integer> getKey(){
				return key;
			}
			
			@SuppressWarnings("unused")
			ArrayList<Integer> getValue(){
				return value;
			}
		}
		
		ArrayList<ArrayList<Integer>> S = DyckPermutation.listOfPerm(a);
		// S is now the list of all permutations
		
		ArrayList<Hash> W = new ArrayList<Hash>();
		// W is the set of pairs generated by by flips in Z including bad flips
		ArrayList<Hash> X = new ArrayList<Hash>();
		// X is the set of pairs generated by flips in Z
		ArrayList<DyckPermutation> Y = new ArrayList<DyckPermutation>();
		// Y is the set of nonnegative permutations
		ArrayList<DyckPermutation> Z = new ArrayList<DyckPermutation>();
		// Z is the set of Dyck permutations
		for (ArrayList<Integer> perm: S) {
			DyckPermutation current = new DyckPermutation(perm);
			if (current.valid()){
				Y.add(current);
				if(current.sumSigZero()) {
					Z.add(current);
				}
			}
		}
		
		for(DyckPermutation d: Z) {
			ArrayList<Integer> arr = d.getPerm();
			X.add(new Hash(arr,arr));
			for (int i = 1; i< length - 1; i++) {
				if (arr.get(length-1) > arr.get(i-1)) {
					X.add(new Hash(reflect(arr,i),arr));
					W.add(new Hash(reflect(arr,i),arr));
				}
				else {
					W.add(new Hash(reflect(arr,i),arr));
				}
			}
		}
		
		ArrayList<DyckPermutation> noneGen = new ArrayList<DyckPermutation>();
		ArrayList<DyckPermutation> twiceGen = new ArrayList<DyckPermutation>();

		for (DyckPermutation d : Y) {
			int count = 0;
			for (Hash e: X) {
				if (d.getPerm().equals(e.getKey())) {
					count++;
				}
			}
			if (count == 0) {
				noneGen.add(d);
			}
			if (count == 2) {
				twiceGen.add(d);
			}
		}
		
//		System.out.println(S);
//		System.out.println(Y);
//		System.out.println(Z);
//		System.out.println(noneGen);
//		System.out.println(twiceGen);
//		System.out.println(noneGen.size());
//		System.out.println(twiceGen.size());

		int[] trackNone = new int[10];
		int[] trackTwice = new int[10];

		// now printing
		if(noneGen.size() == twiceGen.size()) {
			for (int i = 0; i< noneGen.size(); i++) {
				trackNone[noneGen.get(i).getLast()] ++;
				trackTwice[twiceGen.get(i).getLast()] ++;
			}
		}
		System.out.println(Arrays.toString(trackNone));
		System.out.println(Arrays.toString(trackTwice));
		System.out.println("finished");
	}
}
